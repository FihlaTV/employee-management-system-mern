{"version":3,"sources":["../server/server.js"],"names":["app","use","static","json","initialize","session","process","env","NODE_ENV","Promise","global","connect","db","uri","options","then","connection","port","PORT","server","listen","console","log","get","catch","error","MongoStore","require","saveUninitialized","resave","secret","sessionSecret","store","mongooseConnection","req","res","sendFile","resolve"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAyCA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAxCA,MAAMA,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACAF,IAAIC,GAAJ,CAAQ,qBAAWE,IAAX,EAAR;AACAH,IAAIC,GAAJ,CAAQ,6BAAR;AACAD,IAAIC,GAAJ,CAAQ,mBAASG,UAAT,EAAR;AACAJ,IAAIC,GAAJ,CAAQ,mBAASI,OAAT,EAAR;;AAEAL,IAAIC,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACA,IAAIK,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AACxC;AACAR,QAAIC,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACH,CAHD,MAGO,IAAIK,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AAC9CR,QAAIC,GAAJ,CAAQ,4BAAR;AACH;;AAED,mBAASQ,OAAT,GAAmBC,OAAOD,OAA1B;AACA,mBAASE,OAAT,CAAiB,iBAAOC,EAAP,CAAUC,GAA3B,EAAgC,iBAAOD,EAAP,CAAUE,OAA1C,EAAmDC,IAAnD,CAAwDC,cAAc;AAClE,UAAMC,OAAOX,QAAQC,GAAR,CAAYW,IAAZ,IAAoB,iBAAOC,MAAP,CAAcF,IAA/C;AACAjB,QAAIoB,MAAJ,CAAWH,IAAX,EAAiB,MAAM;AACnBI,gBAAQC,GAAR,CAAY,4CAAZ,EAA0DL,IAA1D,EAAgEjB,IAAIuB,GAAJ,CAAQ,KAAR,CAAhE;AACH,KAFD;AAGH,CALD,EAKGC,KALH,CAKSC,SAAS;AACdJ,YAAQC,GAAR,CAAY,QAAZ,EAAsBG,KAAtB;AACH,CAPD,EAOG;;AAGH,MAAMC,aAAaC,QAAQ,eAAR,2BAAnB;AACA3B,IAAIC,GAAJ,CAAQ,8BAAQ;AACZ2B,uBAAmB,IADP;AAEZC,YAAQ,IAFI;AAGZC,YAAQ,iBAAOC,aAHH;AAIZC,WAAO,IAAIN,UAAJ,CAAe;AAClBO,4BAAoB,mBAASjB;AADX,KAAf;AAJK,CAAR,CAAR;;AASA;;;AAMA;AACAhB,IAAIuB,GAAJ,CAAQ,GAAR;AACAvB,IAAIC,GAAJ,CAAQ,WAAR;AACAD,IAAIC,GAAJ,CAAQ,iBAAR;AACAD,IAAIC,GAAJ,CAAQ,eAAR;AACAD,IAAIuB,GAAJ,CAAQ,GAAR,EAAa,CAACW,GAAD,EAAMC,GAAN,KAAc;AACvBd,YAAQC,GAAR,CAAY,mBAAZ;AACAa,QAAIC,QAAJ,CAAa,eAAKC,OAAL,CAAa,mBAAb,CAAb;AACH,CAHD","file":"server.js","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport cookieParser from 'cookie-parser';\nimport session from 'express-session';\nimport morgan from \"morgan\";\nimport compression from 'compression';\nimport mongoose from \"mongoose\";\nimport passport from \"passport\";\nimport config from './config';\nimport path from \"path\";\nimport 'babel-polyfill';\n\n\n\nconst app = express();\napp.use(express.static('static'));\napp.use(bodyParser.json());\napp.use(cookieParser());\napp.use(passport.initialize());\napp.use(passport.session());\n\napp.use(morgan('dev'));\nif (process.env.NODE_ENV === 'development') {\n    //use logger\n    app.use(morgan('dev'));\n} else if (process.env.NODE_ENV === 'production') {\n    app.use(compression());\n}\n\nmongoose.Promise = global.Promise;\nmongoose.connect(config.db.uri, config.db.options).then(connection => {\n    const port = process.env.PORT || config.server.port;\n    app.listen(port, () => {\n        console.log('Express server listening on %d, in %s mode', port, app.get('env'));\n    });\n}).catch(error => {\n    console.log('ERROR:', error);\n});;\n\n\nconst MongoStore = require('connect-mongo')(session);\napp.use(session({\n    saveUninitialized: true,\n    resave: true,\n    secret: config.sessionSecret,\n    store: new MongoStore({\n        mongooseConnection: mongoose.connection\n    })\n}));\n\n//add routes\nimport index from './routes/index';\nimport user from './routes/user';\nimport department from './routes/department';\nimport employee from './routes/employee';\n\n// It has to be placed at the end of all routes\napp.get('/', index);\napp.use('/api/user', user);\napp.use('/api/department', department);\napp.use('/api/employee', employee);\napp.get('*', (req, res) => {\n    console.log('route to no where');\n    res.sendFile(path.resolve('static/index.html'));\n});\n"]}