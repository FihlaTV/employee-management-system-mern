{"version":3,"sources":["../../server/controllers/user.js"],"names":["passport","require","getErrorMessage","err","message","code","errName","errors","exports","signup","req","res","next","user","body","provider","save","flash","redirect","login","saveOAuthUserProfile","profile","done","findOne","providerId","possibleUsername","username","email","split","findUniqueUsername","availableUsername","signout","logout","requiresLogin","isAuthenticated","status","send","userByID","id","_id"],"mappings":"AAAA;AACA;;AAEA;;AACA;;;;;;AACA,IAAIA,WAAWC,QAAQ,UAAR,CAAf;;AAEA;AACA,IAAIC,kBAAkB,UAAUC,GAAV,EAAe;AACjC;AACA,QAAIC,UAAU,EAAd;;AAEA;AACA,QAAID,IAAIE,IAAR,EAAc;AACV,gBAAQF,IAAIE,IAAZ;AACI;AACA,iBAAK,KAAL;AACA,iBAAK,KAAL;AACID,0BAAU,yBAAV;AACA;AACJ;AACA;AACIA,0BAAU,sBAAV;AARR;AAUH,KAXD,MAWO;AACH;AACA,aAAK,IAAIE,OAAT,IAAoBH,IAAII,MAAxB,EAAgC;AAC5B,gBAAIJ,IAAII,MAAJ,CAAWD,OAAX,EAAoBF,OAAxB,EAAiCA,UAAUD,IAAII,MAAJ,CAAWD,OAAX,EAAoBF,OAA9B;AACpC;AACJ;;AAED;AACA,WAAOA,OAAP;AACH,CAzBD;;AA4BA;AACAI,QAAQC,MAAR,GAAiB,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AACvC;AACA,QAAI,CAACF,IAAIG,IAAT,EAAe;AACX;AACA,YAAIA,OAAO,mBAASH,IAAII,IAAb,CAAX;AACA,YAAIV,UAAU,IAAd;;AAEA;AACAS,aAAKE,QAAL,GAAgB,OAAhB;;AAEA;AACAF,aAAKG,IAAL,CAAU,UAAUb,GAAV,EAAe;AACrB;AACA,gBAAIA,GAAJ,EAAS;AACL;AACA,oBAAIC,UAAUF,gBAAgBC,GAAhB,CAAd;;AAEA;AACAO,oBAAIO,KAAJ,CAAU,OAAV,EAAmBb,OAAnB;;AAEA;AACA,uBAAOO,IAAIO,QAAJ,CAAa,SAAb,CAAP;AACH;;AAED;AACAR,gBAAIS,KAAJ,CAAUN,IAAV,EAAgB,UAAUV,GAAV,EAAe;AAC3B;AACA,oBAAIA,GAAJ,EAAS,OAAOS,KAAKT,GAAL,CAAP;;AAET;AACA,uBAAOQ,IAAIO,QAAJ,CAAa,GAAb,CAAP;AACH,aAND;AAOH,SArBD;AAsBH,KA/BD,MA+BO;AACH,eAAOP,IAAIO,QAAJ,CAAa,GAAb,CAAP;AACH;AACJ,CApCD;;AAsCA;AACAV,QAAQY,oBAAR,GAA+B,UAAUV,GAAV,EAAeW,OAAf,EAAwBC,IAAxB,EAA8B;AACzD;AACA,mBAAKC,OAAL,CAAa;AACTR,kBAAUM,QAAQN,QADT;AAETS,oBAAYH,QAAQG;AAFX,KAAb,EAGG,UAAUrB,GAAV,EAAeU,IAAf,EAAqB;AACpB;AACA,YAAIV,GAAJ,EAAS;AACL,mBAAOmB,KAAKnB,GAAL,CAAP;AACH,SAFD,MAEO;AACH;AACA,gBAAI,CAACU,IAAL,EAAW;AACP;AACA,oBAAIY,mBAAmBJ,QAAQK,QAAR,KAAsBL,QAAQM,KAAT,GAAkBN,QAAQM,KAAR,CAAcC,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAAlB,GAAgD,EAArE,CAAvB;;AAEA;AACA,+BAAKC,kBAAL,CAAwBJ,gBAAxB,EAA0C,IAA1C,EAAgD,UAAUK,iBAAV,EAA6B;AACzE;AACAT,4BAAQK,QAAR,GAAmBI,iBAAnB;;AAEA;AACAjB,2BAAO,mBAASQ,OAAT,CAAP;;AAEA;AACAR,yBAAKG,IAAL,CAAU,UAAUb,GAAV,EAAe;AACrB;AACA,+BAAOmB,KAAKnB,GAAL,EAAUU,IAAV,CAAP;AACH,qBAHD;AAIH,iBAZD;AAaH,aAlBD,MAkBO;AACH;AACA,uBAAOS,KAAKnB,GAAL,EAAUU,IAAV,CAAP;AACH;AACJ;AACJ,KAhCD;AAiCH,CAnCD;;AAqCA;AACAL,QAAQuB,OAAR,GAAkB,UAAUrB,GAAV,EAAeC,GAAf,EAAoB;AAClC;AACAD,QAAIsB,MAAJ;;AAEA;AACArB,QAAIO,QAAJ,CAAa,GAAb;AACH,CAND;;AAQA;AACAV,QAAQyB,aAAR,GAAwB,UAAUvB,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AAC9C;AACA,QAAI,CAACF,IAAIwB,eAAJ,EAAL,EAA4B;AACxB,eAAOvB,IAAIwB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBhC,qBAAS;AADe,SAArB,CAAP;AAGH;;AAED;AACAQ;AACH,CAVD;AAWAJ,QAAQ6B,QAAR,GAAmB,UAAS3B,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB0B,EAAzB,EAA6B;AAC5C,mBAAKf,OAAL,CAAa;AACTgB,aAAKD;AADI,KAAb,EAEG,UAASnC,GAAT,EAAcU,IAAd,EAAoB;AACnB,YAAIV,GAAJ,EAAS;AACL,mBAAOS,KAAKT,GAAL,CAAP;AACH,SAFD,MAGK;AACDO,gBAAIG,IAAJ,GAAWA,IAAX;AACAD;AACH;AACJ,KAVD;AAWH,CAZD","file":"user.js","sourcesContent":["// Invoke 'strict' JavaScript mode\n'use strict';\n\n// Load the module dependencies\nimport User from \"../models/user\";\nvar passport = require('passport');\n\n// Create a new error handling controller method\nvar getErrorMessage = function (err) {\n    // Define the error message variable\n    var message = '';\n\n    // If an internal MongoDB error occurs get the error message\n    if (err.code) {\n        switch (err.code) {\n            // If a unique index error occurs set the message error\n            case 11000:\n            case 11001:\n                message = 'Username already exists';\n                break;\n            // If a general error occurs set the message error\n            default:\n                message = 'Something went wrong';\n        }\n    } else {\n        // Grab the first error message from a list of possible errors\n        for (var errName in err.errors) {\n            if (err.errors[errName].message) message = err.errors[errName].message;\n        }\n    }\n\n    // Return the message error\n    return message;\n};\n\n\n// Create a new controller method that creates new 'regular' users\nexports.signup = function (req, res, next) {\n    // If user is not connected, create and login a new user, otherwise redirect the user back to the main application page\n    if (!req.user) {\n        // Create a new 'User' model instance\n        var user = new User(req.body);\n        var message = null;\n\n        // Set the user provider property\n        user.provider = 'local';\n\n        // Try saving the new user document\n        user.save(function (err) {\n            // If an error occurs, use flash messages to report the error\n            if (err) {\n                // Use the error handling method to get the error message\n                var message = getErrorMessage(err);\n\n                // Set the flash messages\n                req.flash('error', message);\n\n                // Redirect the user back to the signup page\n                return res.redirect('/signup');\n            }\n\n            // If the user was created successfully use the Passport 'login' method to login\n            req.login(user, function (err) {\n                // If a login error occurs move to the next middleware\n                if (err) return next(err);\n\n                // Redirect the user back to the main application page\n                return res.redirect('/');\n            });\n        });\n    } else {\n        return res.redirect('/');\n    }\n};\n\n// Create a new controller method that creates new 'OAuth' users\nexports.saveOAuthUserProfile = function (req, profile, done) {\n    // Try finding a user document that was registered using the current OAuth provider\n    User.findOne({\n        provider: profile.provider,\n        providerId: profile.providerId\n    }, function (err, user) {\n        // If an error occurs continue to the next middleware\n        if (err) {\n            return done(err);\n        } else {\n            // If a user could not be found, create a new user, otherwise, continue to the next middleware\n            if (!user) {\n                // Set a possible base username\n                var possibleUsername = profile.username || ((profile.email) ? profile.email.split('@')[0] : '');\n\n                // Find a unique available username\n                User.findUniqueUsername(possibleUsername, null, function (availableUsername) {\n                    // Set the available user name\n                    profile.username = availableUsername;\n\n                    // Create the user\n                    user = new User(profile);\n\n                    // Try saving the new user document\n                    user.save(function (err) {\n                        // Continue to the next middleware\n                        return done(err, user);\n                    });\n                });\n            } else {\n                // Continue to the next middleware\n                return done(err, user);\n            }\n        }\n    });\n};\n\n// Create a new controller method for signing out\nexports.signout = function (req, res) {\n    // Use the Passport 'logout' method to logout\n    req.logout();\n\n    // Redirect the user back to the main application page\n    res.redirect('/');\n};\n\n// Create a new controller middleware that is used to authorize authenticated operations\nexports.requiresLogin = function (req, res, next) {\n    // If a user is not authenticated send the appropriate error message\n    if (!req.isAuthenticated()) {\n        return res.status(401).send({\n            message: 'User is not logged in'\n        });\n    }\n\n    // Call the next middleware\n    next();\n};\nexports.userByID = function(req, res, next, id) {\n    User.findOne({\n        _id: id\n    }, function(err, user) {\n        if (err) {\n            return next(err);\n        }\n        else {\n            req.user = user;\n            next();\n        }\n    });\n};\n"]}