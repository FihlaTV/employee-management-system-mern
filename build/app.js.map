{"version":3,"sources":["../server/app.js"],"names":["app","use","static","json","initialize","join","cors","require","process","env","NODE_ENV","morgan","Promise","global","connect","db","uri","options","then","connection","port","PORT","server","listen","console","log","get","catch","error","auth","authCheckMiddleware","req","res","sendFile","resolve"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAqCA;;;;AACA;;;;AACA;;;;;;AApCA;AACA,MAAMA,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACAF,IAAIC,GAAJ,CAAQ,qBAAWE,IAAX,EAAR;AACAH,IAAIC,GAAJ,CAAQ,mBAASG,UAAT,EAAR;AACAJ,IAAIC,GAAJ,CAAQ,4BAAQ,eAAKI,IAAL,CAAU,QAAV,EAAoB,QAApB,EAA8B,aAA9B,CAAR,CAAR;;AAEA;AACA,MAAMC,OAAOC,QAAQ,mBAAR,CAAb;AACAP,IAAIC,GAAJ,CAAQK,IAAR;;AAEA,IAAIE,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AACxC,UAAMC,SAASJ,QAAQ,QAAR,CAAf;AACA;AACAP,QAAIC,GAAJ,CAAQU,OAAO,KAAP,CAAR;AACH,CAJD,MAIO,IAAIH,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AAC9CV,QAAIC,GAAJ,CAAQ,4BAAR;AACH;;AAED,mBAASW,OAAT,GAAmBC,OAAOD,OAA1B;AACA,mBAASE,OAAT,CAAiB,iBAAOC,EAAP,CAAUC,GAA3B,EAAgC,iBAAOD,EAAP,CAAUE,OAA1C,EAAmDC,IAAnD,CAAwDC,cAAc;AAClE,UAAMC,OAAOZ,QAAQC,GAAR,CAAYY,IAAZ,IAAoB,iBAAOC,MAAP,CAAcF,IAA/C;AACApB,QAAIuB,MAAJ,CAAWH,IAAX,EAAiB,MAAM;AACnBI,gBAAQC,GAAR,CAAY,4CAAZ,EAA0DL,IAA1D,EAAgEpB,IAAI0B,GAAJ,CAAQ,KAAR,CAAhE;AACH,KAFD;AAGH,CALD,EAKGC,KALH,CAKSC,SAAS;AACdJ,YAAQC,GAAR,CAAY,QAAZ,EAAsBG,KAAtB;AACH,CAPD;AAQA;;AAEA,MAAMC,OAAOtB,QAAQ,eAAR,CAAb;AACAP,IAAIC,GAAJ,CAAQ,OAAR,EAAiB4B,IAAjB;;AAOA;AACA,MAAMC,sBAAsBvB,QAAQ,yBAAR,CAA5B;AACAP,IAAIC,GAAJ,CAAQ,MAAR,EAAgB6B,mBAAhB;AACA9B,IAAIC,GAAJ,CAAQ,WAAR;AACAD,IAAIC,GAAJ,CAAQ,iBAAR;AACAD,IAAIC,GAAJ,CAAQ,eAAR;AACAD,IAAI0B,GAAJ,CAAQ,GAAR,EAAa,CAACK,GAAD,EAAMC,GAAN,KAAc;AACvBR,YAAQC,GAAR,CAAY,mBAAZ;AACAO,QAAIC,QAAJ,CAAa,eAAKC,OAAL,CAAa,mBAAb,CAAb;AACH,CAHD","file":"app.js","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport compression from 'compression';\nimport mongoose from \"mongoose\";\nimport passport from \"passport\";\nimport initPassport from \"./passport\";\nimport config from './config';\nimport path from \"path\";\nimport favicon from 'serve-favicon';\nimport 'babel-polyfill';\n\n\ninitPassport();\nconst app = express();\napp.use(express.static('static'));\napp.use(bodyParser.json());\napp.use(passport.initialize());\napp.use(favicon(path.join('static', 'images', 'favicon.ico')));\n\n// enable server cors mode\nconst cors = require('./middleware/cors');\napp.use(cors);\n\nif (process.env.NODE_ENV === 'development') {\n    const morgan = require(\"morgan\");\n    //use logger\n    app.use(morgan('dev'));\n} else if (process.env.NODE_ENV === 'production') {\n    app.use(compression());\n}\n\nmongoose.Promise = global.Promise;\nmongoose.connect(config.db.uri, config.db.options).then(connection => {\n    const port = process.env.PORT || config.server.port;\n    app.listen(port, () => {\n        console.log('Express server listening on %d, in %s mode', port, app.get('env'));\n    });\n}).catch(error => {\n    console.log('ERROR:', error);\n});\n// mongoose.set('debug', true);\n\nconst auth = require('./routes/auth');\napp.use('/auth', auth);\n\n\nimport user from './routes/user';\nimport department from './routes/department';\nimport employee from './routes/employee';\n\n// pass the authorization checker middleware\nconst authCheckMiddleware = require('./middleware/auth-check');\napp.use('/api', authCheckMiddleware);\napp.use('/api/user', user);\napp.use('/api/department', department);\napp.use('/api/employee', employee);\napp.get('*', (req, res) => {\n    console.log('route to no where');\n    res.sendFile(path.resolve('static/index.html'));\n});\n"]}