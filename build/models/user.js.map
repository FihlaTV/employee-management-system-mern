{"version":3,"sources":["../../server/models/user.js"],"names":["bcrypt","require","mongoose","SALT_FACTOR","userSchema","Schema","username","type","String","required","unique","password","createdAt","Date","default","now","displayName","bio","noop","pre","done","user","isModified","genSalt","err","salt","hash","hashedPassword","methods","checkPassword","guess","compare","isMatch","name","User","model","module","exports"],"mappings":";;AAAA,IAAIA,SAASC,QAAQ,eAAR,CAAb;AACA,IAAIC,WAAWD,QAAQ,UAAR,CAAf;;AAEA,MAAME,cAAc,EAApB;;AAEA,IAAIC,aAAaF,SAASG,MAAT,CAAgB;AAC/BC,YAAU,EAAEC,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAAgCC,QAAQ,IAAxC,EADqB;AAE/BC,YAAU,EAAEJ,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAFqB;AAG/BG,aAAW,EAAEL,MAAMM,IAAR,EAAcC,SAASD,KAAKE,GAA5B,EAHoB;AAI/BC,eAAaR,MAJkB;AAK/BS,OAAKT;AAL0B,CAAhB,CAAjB;;AAQA,IAAIU,OAAO,YAAW,CAAE,CAAxB;;AAEAd,WAAWe,GAAX,CAAe,MAAf,EAAuB,UAASC,IAAT,EAAe;AACpC,MAAIC,OAAO,IAAX;;AAEA,MAAI,CAACA,KAAKC,UAAL,CAAgB,UAAhB,CAAL,EAAkC;AAChC,WAAOF,MAAP;AACD;;AAEDpB,SAAOuB,OAAP,CAAepB,WAAf,EAA4B,UAASqB,GAAT,EAAcC,IAAd,EAAoB;AAC9C,QAAID,GAAJ,EAAS;AAAE,aAAOJ,KAAKI,GAAL,CAAP;AAAmB;AAC9BxB,WAAO0B,IAAP,CAAYL,KAAKV,QAAjB,EAA2Bc,IAA3B,EAAiCP,IAAjC,EAAuC,UAASM,GAAT,EAAcG,cAAd,EAA8B;AACnE,UAAIH,GAAJ,EAAS;AAAE,eAAOJ,KAAKI,GAAL,CAAP;AAAmB;AAC9BH,WAAKV,QAAL,GAAgBgB,cAAhB;AACAP;AACD,KAJD;AAKD,GAPD;AAQD,CAfD;;AAiBAhB,WAAWwB,OAAX,CAAmBC,aAAnB,GAAmC,UAASC,KAAT,EAAgBV,IAAhB,EAAsB;AACvDpB,SAAO+B,OAAP,CAAeD,KAAf,EAAsB,KAAKnB,QAA3B,EAAqC,UAASa,GAAT,EAAcQ,OAAd,EAAuB;AAC1DZ,SAAKI,GAAL,EAAUQ,OAAV;AACD,GAFD;AAGD,CAJD;;AAMA5B,WAAWwB,OAAX,CAAmBK,IAAnB,GAA0B,YAAW;AACnC,SAAO,KAAKjB,WAAL,IAAoB,KAAKV,QAAhC;AACD,CAFD;;AAIA,IAAI4B,OAAOhC,SAASiC,KAAT,CAAe,MAAf,EAAuB/B,UAAvB,CAAX;;AAEAgC,OAAOC,OAAP,GAAiBH,IAAjB","file":"user.js","sourcesContent":["var bcrypt = require(\"bcrypt-nodejs\");\nvar mongoose = require(\"mongoose\");\n\nconst SALT_FACTOR = 10;\n\nvar userSchema = mongoose.Schema({\n  username: { type: String, required: true, unique: true },\n  password: { type: String, required: true },\n  createdAt: { type: Date, default: Date.now },\n  displayName: String,\n  bio: String\n});\n\nvar noop = function() {};\n\nuserSchema.pre(\"save\", function(done) {\n  var user = this;\n\n  if (!user.isModified(\"password\")) {\n    return done();\n  }\n\n  bcrypt.genSalt(SALT_FACTOR, function(err, salt) {\n    if (err) { return done(err); }\n    bcrypt.hash(user.password, salt, noop, function(err, hashedPassword) {\n      if (err) { return done(err); }\n      user.password = hashedPassword;\n      done();\n    });\n  });\n});\n\nuserSchema.methods.checkPassword = function(guess, done) {\n  bcrypt.compare(guess, this.password, function(err, isMatch) {\n    done(err, isMatch);\n  });\n};\n\nuserSchema.methods.name = function() {\n  return this.displayName || this.username;\n};\n\nvar User = mongoose.model(\"User\", userSchema);\n\nmodule.exports = User;\n"]}