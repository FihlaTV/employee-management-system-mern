{"version":3,"sources":["../../server/models/user.js"],"names":["bcrypt","require","saltRounds","myPlaintextPassword","someOtherPlaintextPassword","Schema","userSchema","username","type","String","required","unique","password","displayName","bio","timestamps","noop","pre","next","user","isModified","genSalt","err","salt","hash","hashedPassword","updatedAt","Date","now","methods","checkPassword","guess","cb","compare","isMatch","name","User","model","module","exports"],"mappings":";;AAAA;;;;;;AACA,IAAIA,SAASC,QAAQ,QAAR,CAAb;AACA,MAAMC,aAAa,EAAnB;AACA,MAAMC,sBAAsB,gBAA5B;AACA,MAAMC,6BAA6B,WAAnC;;AAGA,IAAIC,SAAS,mBAASA,MAAtB;AACA,IAAIC,aAAa,IAAID,MAAJ,CAAW;AAC1BE,YAAU;AACRC,UAAMC,MADE;AAERC,cAAU,IAFF;AAGRC,YAAQ;AAHA,GADgB;AAM1BC,YAAU;AACRJ,UAAMC,MADE;AAERC,cAAU;AAFF,GANgB;AAU1BG,eAAaJ,MAVa;AAW1BK,OAAKL;AAXqB,CAAX,EAYd;AACDM,cAAY;AADX,CAZc,CAAjB;;AAgBA,IAAIC,OAAO,YAAY,CAAE,CAAzB;;AAEAV,WAAWW,GAAX,CAAe,MAAf,EAAuB,UAAUC,IAAV,EAAgB;AACrC,MAAIC,OAAO,IAAX;;AAEA,MAAI,CAACA,KAAKC,UAAL,CAAgB,UAAhB,CAAL,EAAkC;AAChC,WAAOF,MAAP;AACD;;AAEDlB,SAAOqB,OAAP,CAAenB,UAAf,EAA2B,UAAUoB,GAAV,EAAeC,IAAf,EAAqB;AAC9C,QAAID,GAAJ,EAAS;AACP,aAAOJ,KAAKI,GAAL,CAAP;AACD;AACDtB,WAAOwB,IAAP,CAAYL,KAAKP,QAAjB,EAA2BW,IAA3B,EAAiC,UAAUD,GAAV,EAAeG,cAAf,EAA+B;AAC9D,UAAIH,GAAJ,EAAS;AACP,eAAOJ,KAAKI,GAAL,CAAP;AACD;AACDH,WAAKP,QAAL,GAAgBa,cAAhB;AACA,WAAKC,SAAL,GAAiBC,KAAKC,GAAL,EAAjB;AACAV;AACD,KAPD;AAQD,GAZD;AAaD,CApBD;;AAsBAZ,WAAWuB,OAAX,CAAmBC,aAAnB,GAAmC,UAAUC,KAAV,EAAiBC,EAAjB,EAAqB;AACtDhC,SAAOiC,OAAP,CAAeF,KAAf,EAAsB,KAAKnB,QAA3B,EAAqC,UAAUU,GAAV,EAAeY,OAAf,EAAwB;AAC3DF,OAAGV,GAAH,EAAQY,OAAR;AACD,GAFD;AAGD,CAJD;;AAMA5B,WAAWuB,OAAX,CAAmBM,IAAnB,GAA0B,YAAY;AACpC,SAAO,KAAKtB,WAAL,IAAoB,KAAKN,QAAhC;AACD,CAFD;;AAIA,MAAM6B,OAAO,mBAASC,KAAT,CAAe,MAAf,EAAuB/B,UAAvB,CAAb;AACAgC,OAAOC,OAAP,GAAiBH,IAAjB","file":"user.js","sourcesContent":["import mongoose from \"mongoose\";\nvar bcrypt = require('bcrypt');\nconst saltRounds = 10;\nconst myPlaintextPassword = 's0/\\/\\P4$$w0rD';\nconst someOtherPlaintextPassword = 'not_bacon';\n\n\nvar Schema = mongoose.Schema;\nvar userSchema = new Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  displayName: String,\n  bio: String\n}, {\n  timestamps: true\n});\n\nvar noop = function () {};\n\nuserSchema.pre(\"save\", function (next) {\n  var user = this;\n\n  if (!user.isModified(\"password\")) {\n    return next();\n  }\n\n  bcrypt.genSalt(saltRounds, function (err, salt) {\n    if (err) {\n      return next(err);\n    }\n    bcrypt.hash(user.password, salt, function (err, hashedPassword) {\n      if (err) {\n        return next(err);\n      }\n      user.password = hashedPassword;\n      this.updatedAt = Date.now();\n      next();\n    });\n  });\n});\n\nuserSchema.methods.checkPassword = function (guess, cb) {\n  bcrypt.compare(guess, this.password, function (err, isMatch) {\n    cb(err, isMatch);\n  });\n};\n\nuserSchema.methods.name = function () {\n  return this.displayName || this.username;\n};\n\nconst User = mongoose.model(\"user\", userSchema);\nmodule.exports = User;\n"]}