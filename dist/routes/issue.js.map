{"version":3,"sources":["../../server/routes/issue.js"],"names":["express","require","router","Router","Employee","Issue","get","req","res","filter","query","status","effort_lte","effort_gte","effort","$lte","parseInt","$gte","search","$text","$search","_summary","undefined","offset","_offset","limit","_limit","console","log","cursor","db","collection","find","sort","created","skip","totalCount","count","then","result","toArray","issues","json","metadata","records","catch","error","message","aggregate","$match","$group","_id","owner","$sum","exec","results","stats","forEach","module","exports"],"mappings":"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","file":"issue.js","sourcesContent":["var express = require('express');\nvar router = express.Router();\n\nvar Employee = require(\"../models/employee\");\nvar Issue = require(\"../models/issue\");\n\n// TODO: should implement range pagination instead of using skip to result in better server performance\nrouter.get('/issues', (req, res) => {\n  \n    const filter = {};\n    if (req.query.status) filter.status = req.query.status;\n    if (req.query.effort_lte || req.query.effort_gte) filter.effort = {};\n    if (req.query.effort_lte) filter.effort.$lte = parseInt(req.query.effort_lte, 10);\n    if (req.query.effort_gte) filter.effort.$gte = parseInt(req.query.effort_gte, 10);\n    if (req.query.search) filter.$text = { $search: req.query.search };\n\n    if (req.query._summary === undefined) {\n        const offset = req.query._offset ? parseInt(req.query._offset, 10) : 0;\n        let limit = req.query._limit ? parseInt(req.query._limit, 10) : 20;\n\n        console.log('offset', offset);\n        console.log('limit', limit);\n\n        if (limit > 50) limit = 50;\n        const cursor = db.collection('issues').find(filter).sort({ created: -1 }).skip(offset).limit(limit);\n\n        let totalCount;\n        // ensures that the effects of skip() and limit() will be ignored\n        cursor.count(false).then(result => {\n            totalCount = result;\n            return cursor.toArray();\n        }).then(issues => {\n            res.json({ metadata: { totalCount }, records: issues });\n        }).catch(error => {\n            console.log(error);\n            res.status(500).json({ message: `Internal Server Error: ${error}` });\n        });\n    } else {\n        console.log('doing aggregation', filter);\n        Issue.aggregate([\n            { $match: filter },\n            {\n                $group: {\n                    _id: { owner: '$owner', status: '$status' }, count: {\n                        $sum: 1\n                    }\n                }\n            },\n        ]).exec().then(results => {\n                const stats = {};\n                results.forEach(result => {\n                    if (!stats[result._id.owner]) stats[result._id.owner] = {};\n                    stats[result._id.owner][result._id.status] = result.count;\n                });\n                res.json(stats);\n            })\n            .catch(error => {\n                console.log(error);\n                res.status(500).json({ message: `Internal Server Error: ${error}` });\n            });\n    }\n});\n// router.post('/issues', (req, res) => {\n//     const newIssue = req.body;\n//     newIssue.created = new Date();\n//     if (!newIssue.status) {\n//         newIssue.status = 'New';\n//     }\n\n//     const err = IssueHelper.validateIssue(newIssue);\n//     if (err) {\n//         res.status(422).json({ message: `Invalid request: ${err}` });\n//         return;\n//     }\n\n//     db.collection('issues').insertOne(IssueHelper.cleanupIssue(newIssue)).then(result =>\n//         db.collection('issues').find({ _id: result.insertedId }).limit(1)\n//         .next()\n//     )\n//     .then(savedIssue => {\n//         res.json(savedIssue);\n//     })\n//     .catch(error => {\n//         console.log(error);\n//         res.status(500).json({ message: `Internal Server Error: ${error}` });\n//     });\n// });\n// router.get('/issues/:id', (req, res) => {\n//     let issueId;\n//     try {\n//         issueId = new ObjectId(req.params.id);\n//     } catch (error) {\n//         res.status(422).json({ message: `Invalid issue ID format: ${error}` });\n//         return;\n//     }\n//     db.collection('issues').find({ _id: issueId }).limit(1)\n//         .next()\n//         .then(issue => {\n//             if (!issue) res.status(404).json({ message: `No such issue: ${issueId}` });\n//             else res.json(issue);\n//         })\n//         .catch(error => {\n//             console.log(error);\n//             res.status(500).json({ message: `Internal Server Error: ${error}` });\n//         });\n// });\n// // Add routes for handling PATCH request\n// router.put('/issues/:id', (req, res) => {\n//     let issueId;\n//     try {\n//         issueId = new ObjectId(req.params.id);\n//     } catch (error) {\n//         res.status(422).json({ message: `Invalid issue ID format: ${error}` });\n//         return;\n//     }\n//     const issue = req.body;\n\n//     // MongoDB update operation treats the ID specially, and leaves it\n//     // intact even if not present in the document that replaces the existing document.\n//     delete issue._id;\n\n//     const err = IssueHelper.validateIssue(issue);\n//     if (err) {\n//         res.status(422).json({ message: `Invalid request: ${err}` });\n//         return;\n//     }\n//     db.collection('issues').update({ _id: issueId },\n//         IssueHelper.convertIssue(issue)).then(() =>\n//             db.collection('issues').find({ _id: issueId }).limit(1).next()\n//         ).then(savedIssue => {\n//             res.json(savedIssue);\n//         }).catch(error => {\n//             console.log(error);\n//             res.status(500).json({ message: `Internal Server Error: ${error}` });\n//         });\n// });\n\n// // Server delete method\n// router.delete('/issues/:id', (req, res) => {\n//     let issueId;\n//     try {\n//         issueId = new ObjectId(req.params.id);\n//     } catch (error) {\n//         res.status(422).json({ message: `Invalid issue ID format: ${error}` });\n//         return;\n//     }\n//     db.collection('issues').deleteOne({ _id: issueId }).then((deleteResult) => {\n//         if (deleteResult.result.n === 1) res.json({ status: 'OK' });\n//         else res.json({ status: 'Warning: object not found' });\n//     }).catch(error => {\n//         console.log(error);\n//         res.status(500).json({ message: `Internal Server Error: ${error}` });\n//     });\n// });\n\n// // For bulk delete\n// router.delete('/issues/', (req, res) => {\n\n//     let issueIds = req.body.issueIds\n\n//     try {\n//         issueIds = issueIds.map(id => new ObjectId(id));\n\n//         // for(let i = 0; i < issueIds.length; i++) {\n//         //     issueIds[i] =  new ObjectId( issueIds[i] );\n//         // }\n//     } catch (error) {\n//         res.status(422).json({\n//             message: `Invalid issue ID format: ${error}`\n//         });\n//         return;\n//     }\n  \n//     db.collection('issues').deleteMany({ _id: {'$in':issueIds} }).then((deleteResult) => {\n//         if (deleteResult.result.n === issueIds.length) res.json({ status: 'OK' });\n//         else res.json({ status: 'Warning: object not found' });\n//     }).catch(error => {\n//         console.log(error);\n//         res.status(500).json({ message: `Internal Server Error: ${error}` });\n//     });\n// });\n\nmodule.exports = router;\n"]}